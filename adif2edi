#!/usr/bin/env node
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

'use strict';

var fs = require('fs'),
    path = require('path'),
    lib = require('../lib');

var argv = process.argv;

// console.log(argv);

if (argv.length === 3) {
    var fileName = argv[2];
    var fullFileName = path.resolve(process.cwd(), fileName);
    fs.readFile(fullFileName, 'utf8', function (err, data) {
        if (err) { throw err; }
        // read adif
        var table = lib.read.adif(data);
        // console.log(table);
        var tablePerFreq = lib.perFreq(table.reverse());
        // write edi files
        Object.keys(tablePerFreq).forEach(function (t) {
            var edi = lib.write.edi(tablePerFreq[t]);
            var outputFileName = t + '.edi';
            var fullOutputFileName = path.resolve(process.cwd(), outputFileName);
            fs.writeFile(
                fullOutputFileName,
                edi,
                function (err) {
                    if (err) { throw err; }
                }
            )
        });
    });
}

},{"../lib":2,"fs":undefined,"path":undefined}],2:[function(require,module,exports){
'use strict';

var readAdif = require('./read-adif'),
    writeEdi = require('./write-edi'),
    validateQTH = require('./validate-qth'),
    perFreq = require('./per-freq');

module.exports = {
    read: { adif: readAdif },
    write: { edi: writeEdi },
    perFreq: perFreq,
    validateQTH: validateQTH
};

},{"./per-freq":4,"./read-adif":5,"./validate-qth":6,"./write-edi":7}],3:[function(require,module,exports){
'use strict';

function mode (str) {
    var modes = {
        SSB: 1,
        CW: 2,
        AM: 5,
        FM: 6,
        RTTY: 7,
        SSTV: 8,
        ATV: 9
    };
    return modes[str] || 0;
}

module.exports = mode;

},{}],4:[function(require,module,exports){
'use strict';

function perFreq (table) {
    var res = {};
    table.forEach(function (record) {
        var freq = record.FREQ;
        if (res[freq] === undefined) {
            res[freq] = [];
        }
        res[freq].push(record);
    });
    return res;
}

module.exports = perFreq;

},{}],5:[function(require,module,exports){
'use strict';

var token = /<(\w+)(:(\d+))?>/;

// EOH|EOR

function parse (str) {
    var res, i, m, len, text, obj;

    if (str === undefined) { return []; }
    if (typeof str === 'number') { return [str + '']; }
    if (typeof str !== 'string') { return [str]; }
    res = [];
    while (true) {
        i = str.search(token);
        if (i === -1) {
            res.push({ text: str });
            return res;
        }
        // if (i > 0) {
        //     a = str.slice(0, i);
        // }
        m = str.match(token);
        len = m[3] || 0;
        text = str.slice(0, i);
        str = str.slice(i + m[0].length);
        obj = {
            text: text,
            key: m[1]
        };
        if (len) {
            obj.val = str.slice(0, Number(len));
            str = str.slice(len);
        }
        res.push(obj);
        if (str.length === 0) { return res; }
    }
}

function convert (arr) {
    var obj, res;
    res = [];
    obj = {};
    arr.forEach(function (e) {
        if (e.key === 'EOR' || e.key === 'eor') {
            res.push(obj);
            obj = {};
        } else {
            obj[e.key] = e.val;
        }
    });
    return res;
}

function read (str) {
    return convert(parse(str));
}

module.exports = read;

},{}],6:[function(require,module,exports){
'use strict';

function validateQTH (str) {
    return str.match('^[A-R][A-R][0-9][0-9][a-xA-X][a-xA-X]$');
}

module.exports = validateQTH;

},{}],7:[function(require,module,exports){
'use strict';

var mode = require('./mode');

function write (table) {
    var res = '';
    res += '[QSORecords;' + table.length + ']\n';
    table.forEach(function (r) {
        res += [
            r.QSO_DATE.slice(-6), // Date = YYMMDD, 6 characters 6
            r.TIME_ON, // Time = UTC, 4 characters, with leading zeros 4
            r.CALL, // Call = 3 to 14 characters 14
            mode(r.MODE), // Mode code = 0 or 1 character 1
            r.RST_SENT, // Sent-RST = 0 or 2 or 3 characters 3
            '', // Sent QSO number = 0 or 3 or 4 characters, with leading zeros 4
            r.RST_RCVD, // Received-RST = 0 or 2 or 3 characters 3
            '', // Received QSO number = 0 or 3 or 4 characters, with leading zeros 4
            '', // Received Exchange = 0 or 1 to 6 characters (see also PExch) 6
            r.QTH, // Received WWL = 0 or 4 or 6 characters, World Wide Locator 6
            '1', // QSO points = 1 to 6 characters, including bandmultiplier 6
            '', // New-Exchange = 0 or 1 character, "N" if QSO is a new exchange 1
            'N', // New-WWL = 0 or 1 character, "N" if QSO is a new WWL 1
            '', // New-DXCC = 0 or 1 character, "N" if QSO is a new DXCCL 1
            '' // Duplicate-QSO = 0 or 1 character, "D" if contact is a duplicate QSO 1
        ].join(';') + '\n';
    });
    return res;
}

module.exports = write;

},{"./mode":3}]},{},[1]);
